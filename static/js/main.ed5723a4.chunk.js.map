{"version":3,"sources":["component/Login.jsx","component/Register.jsx","component/ForgotPassword.jsx","component/Password.jsx","component/ResetPassword.jsx","App.js","reportWebVitals.js","index.js"],"names":["Login","history","useHistory","useState","email","password","initialValues","setinitialvalues","validationSchema","Yup","shape","required","matches","onSubmit","values","a","axios","post","push","errors","touched","className","name","type","component","to","Register","first_name","last_name","confirm_password","min","max","oneOf","ForgotPassword","seterrors","form_data","setform_data","submit","e","preventDefault","then","res","catch","console","log","response","data","handlevent","target","id","value","class","onChange","onClick","Password","put","ResetPassword","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAQaA,EAAQ,WACjB,IAAMC,EAAUC,cAEhB,EAA0CC,mBAAS,CAE/CC,MAAO,GACPC,SAAU,KAHd,mBAAOC,EAAP,KAAsBC,EAAtB,KAOMC,EAAmBC,MAAaC,MAAM,CACxCL,SAAUI,MACLE,SAAS,8BACTC,QACG,qDACA,0FAERR,MAAOK,MAAaG,QAChB,+CACA,qEAECR,MAAM,oBACNO,SAAS,uBAKlB,OACI,cAAC,IAAD,CAAQL,cAAeA,EAAeE,iBAAkBA,EACpDK,SAAQ,uCAAE,WAAOC,GAAP,eAAAC,EAAA,sEAIaC,IAAMC,KAAN,6CAAyDH,GAJtE,OAIAG,EAJA,OAMNV,EAAiBU,GACjBhB,EAAQiB,KAAK,QAPP,2CAAF,sDADZ,SAYK,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACR,OACI,qCACI,qBAAKC,UAAU,wBAAf,SAAuC,oBAAIA,UAAU,6BAAd,qBACvC,eAAC,IAAD,CAAMA,UAAU,OAAhB,UACI,qBAAKA,UAAU,WAAf,SACI,sBAAKA,UAAU,oBAAf,UACI,0CACA,cAAC,IAAD,CAAOC,KAAK,QAAQC,KAAK,OAAOF,UAAW,gBAAkBF,EAAOf,OAASgB,EAAQhB,MAAQ,cAAgB,MAC7G,cAAC,IAAD,CAAckB,KAAK,QAAQE,UAAU,MAAMH,UAAU,0BAI7D,qBAAKA,UAAU,WAAf,SACI,sBAAKA,UAAU,oBAAf,UACI,6CACA,cAAC,IAAD,CAAOC,KAAK,WAAWC,KAAK,OAAOF,UAAW,gBAAkBF,EAAOd,UAAYe,EAAQf,SAAW,cAAgB,MACtH,cAAC,IAAD,CAAciB,KAAK,WAAWE,UAAU,MAAMH,UAAU,0BAKhE,wBAAQA,UAAU,uBAAuBE,KAAK,SAA9C,oBAEA,gEAAkC,cAAC,IAAD,CAAME,GAAG,OAAT,uBAClC,oBAAGJ,UAAU,wBAAb,8BAAsD,cAAC,IAAD,CAAMI,GAAG,YAAT,yCChErEC,EAAW,WACpB,IAAMzB,EAAUC,cAEhB,EAA0CC,mBAAS,CAC/CwB,WAAY,GACZC,UAAW,GACXxB,MAAO,GACPC,SAAU,GACVwB,iBAAkB,KALtB,mBAAOvB,EAAP,KAAsBC,EAAtB,KASMC,EAAmBC,MAAaC,MAAM,CACxCiB,WAAYlB,MAAaqB,IAAI,EAAG,cAAcC,IAAI,GAAI,aACjDpB,SAAS,0BACdiB,UAAWnB,MAAaqB,IAAI,EAAG,cAAcC,IAAI,GAAI,aAChDpB,SAAS,yBACdN,SAAUI,MACLE,SAAS,8BACTC,QACG,qDACA,0FAERR,MAAOK,MAAaG,QAChB,+CACA,qEAECR,MAAM,oBACNO,SAAS,qBACdkB,iBAAkBpB,MACbE,SAAS,8BACTqB,MAAM,CAACvB,IAAQ,YAAa,MAAO,0BAK5C,OACI,cAAC,IAAD,CAAQH,cAAeA,EAAeE,iBAAkBA,EACpDK,SAAQ,uCAAE,WAAOC,GAAP,eAAAC,EAAA,sEAIaC,IAAMC,KAAN,+CAA2DH,GAJxE,OAIAG,EAJA,OAMNV,EAAiBU,GACjBhB,EAAQiB,KAAK,KAPP,2CAAF,sDADZ,SAYK,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACR,OACI,qCACI,qBAAKC,UAAU,wBAAf,SAAuC,oBAAIA,UAAU,6BAAd,+BACvC,eAAC,IAAD,CAAMA,UAAU,OAAhB,UAEI,sBAAKA,UAAU,WAAf,UAEI,sBAAKA,UAAU,mBAAf,UACI,+CACA,cAAC,IAAD,CAAOC,KAAK,aAAaC,KAAK,OAAOF,UAAW,gBAAkBF,EAAOQ,YAAcP,EAAQO,WAAa,cAAgB,MAC5H,cAAC,IAAD,CAAcL,KAAK,aAAaE,UAAU,MAAMH,UAAU,wBAE9D,sBAAKA,UAAU,mBAAf,UACI,8CACA,cAAC,IAAD,CAAOC,KAAK,YAAYC,KAAK,OAAOF,UAAW,gBAAkBF,EAAOS,WAAaR,EAAQQ,UAAY,cAAgB,MACzH,cAAC,IAAD,CAAcN,KAAK,YAAYE,UAAU,MAAMH,UAAU,2BAGjE,qBAAKA,UAAU,WAAf,SACI,sBAAKA,UAAU,oBAAf,UACI,0CACA,cAAC,IAAD,CAAOC,KAAK,QAAQC,KAAK,OAAOF,UAAW,gBAAkBF,EAAOf,OAASgB,EAAQhB,MAAQ,cAAgB,MAC7G,cAAC,IAAD,CAAckB,KAAK,QAAQE,UAAU,MAAMH,UAAU,0BAG7D,qBAAKA,UAAU,WAAf,SACI,sBAAKA,UAAU,oBAAf,UACI,6CACA,cAAC,IAAD,CAAOC,KAAK,WAAWC,KAAK,OAAOF,UAAW,gBAAkBF,EAAOd,UAAYe,EAAQf,SAAW,cAAgB,MACtH,cAAC,IAAD,CAAciB,KAAK,WAAWE,UAAU,MAAMH,UAAU,0BAIhE,qBAAKA,UAAU,WAAf,SACI,sBAAKA,UAAU,oBAAf,UACI,qDACA,cAAC,IAAD,CAAOC,KAAK,mBAAmBC,KAAK,OAAOF,UAAW,gBAAkBF,EAAOU,kBAAoBT,EAAQS,iBAAmB,cAAgB,MAC9I,cAAC,IAAD,CAAcP,KAAK,mBAAmBE,UAAU,MAAMH,UAAU,0BAIxE,wBAAQA,UAAU,uBAAuBE,KAAK,SAA9C,oBACA,wBAAQF,UAAU,uBAAuBE,KAAK,QAA9C,mBACA,yDAA2B,cAAC,IAAD,CAAME,GAAG,IAAT,gC,gBCMxCQ,EApGQ,WAGnB,IACMhC,EAAUC,cAEhB,EAA4BC,mBAAS,iBAArC,mBAAOgB,EAAP,KAAee,EAAf,KACA,EAAkC/B,mBAAS,CACvCwB,WAAY,GACZC,UAAW,GACXxB,MAAO,GACPC,SAAU,GACVwB,iBAAkB,KALtB,mBAAOM,EAAP,KAAkBC,EAAlB,KASMC,EAAM,uCAAG,WAAOC,GAAP,eAAAvB,EAAA,6DACXuB,EAAEC,iBADS,SAKQvB,IAAMC,KAlBpB,YAkB8BkB,GAAWK,MAAK,SAACC,GAChDL,EAAanB,GACbhB,EAAQiB,KAAK,QACdwB,OAAM,SAACJ,GACNK,QAAQC,IAAIN,EAAEO,SAASC,MACvBZ,EAAUI,EAAEO,SAASC,KAAK3B,WAVnB,OAKLF,EALK,kDAAH,sDAoBN8B,EAAa,SAACT,GAGhB,IAAMhB,EAAOgB,EAAEU,OAAOC,GAGtBb,EAAa,2BAAKD,GAAN,kBAAkBb,EAAOgB,EAAEU,OAAOE,UAGlD,OAAO,qCACH,qBAAK7B,UAAU,wBAAf,SAAuC,oBAAIA,UAAU,6BAAd,wBACvC,8BAAMF,IACN,iCACI,sBAAKgC,MAAM,OAAX,UACI,+CACA,uBAAO5B,KAAK,OAAO0B,GAAG,aAAaE,MAAM,eAAe7B,KAAK,QAAQ4B,MAAOf,EAAUR,WAAYyB,SAAUL,OAGhH,sBAAKI,MAAM,OAAX,UACI,8CACA,uBAAO5B,KAAK,OAAO0B,GAAG,YAAYE,MAAM,eAAeD,MAAOf,EAAUP,UAAWwB,SAAUL,OAE3F,sBAAKI,MAAM,OAAX,UACF,0CACA,uBAAO5B,KAAK,QAAQ0B,GAAG,QAAQE,MAAM,eAAeD,MAAOf,EAAU/B,MAAOgD,SAAUL,OAEpF,sBAAKI,MAAM,OAAX,UACF,6CACA,uBAAO5B,KAAK,OAAO0B,GAAG,WAAWE,MAAM,eAAe7B,KAAK,QAAQ4B,MAAOf,EAAU9B,SAAU+C,SAAUL,OAG5G,sBAAKI,MAAM,OAAX,UACI,qDACA,uBAAOF,GAAG,mBAAmB1B,KAAK,OAAO4B,MAAM,eAAe7B,KAAK,QAAQ4B,MAAOf,EAAUN,iBAAkBuB,SAAUL,OAG5H,wBAAQxB,KAAK,SAAS4B,MAAM,kBAAkBE,QAAS,SAACf,GAAD,OAAOD,EAAOC,IAArE,2BCVGgB,EA7DE,WACb,IAAMrD,EAAUC,cAEhB,EAA0CC,mBAAS,CAE/CC,MAAO,KAFX,mBAAOE,EAAP,KAAsBC,EAAtB,KAOMC,EAAmBC,MAAaC,MAAM,CAExCN,MAAOK,MAAaG,QAChB,+CACA,qEAECR,MAAM,oBACNO,SAAS,uBAKlB,OACI,cAAC,IAAD,CAAQL,cAAeA,EAAeE,iBAAkBA,EACpDK,SAAQ,uCAAE,WAAOC,GAAP,eAAAC,EAAA,sEAIaC,IAAMuC,IAAN,sDAAiEzC,GAJ9E,OAIAG,EAJA,OAMNV,EAAiBU,GACjBhB,EAAQiB,KAAK,KAPP,2CAAF,sDADZ,SAYK,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACR,OACI,qCACI,qBAAKC,UAAU,wBAAf,SAAuC,oBAAIA,UAAU,6BAAd,qBACvC,eAAC,IAAD,CAAMA,UAAU,OAAhB,UACI,qBAAKA,UAAU,WAAf,SACI,sBAAKA,UAAU,oBAAf,UACI,0CACA,cAAC,IAAD,CAAOC,KAAK,QAAQC,KAAK,OAAOF,UAAW,gBAAkBF,EAAOf,OAASgB,EAAQhB,MAAQ,cAAgB,MAC7G,cAAC,IAAD,CAAckB,KAAK,QAAQE,UAAU,MAAMH,UAAU,0BAK7D,wBAAQA,UAAU,uBAAuBE,KAAK,SAA9C,oBAEA,kDAAoB,cAAC,IAAD,CAAME,GAAG,IAAT,gCCQjC+B,EA7DO,WAClB,IAAMvD,EAAUC,cAEhB,EAA0CC,mBAAS,CAC/CE,SAAU,KADd,mBAAOC,EAAP,KAAsBC,EAAtB,KAKMC,EAAmBC,MAAaC,MAAM,CACxCL,SAAUI,MACLE,SAAS,8BACTC,QACG,qDACA,0FAERiB,iBAAkBpB,MACbE,SAAS,8BACTqB,MAAM,CAACvB,IAAQ,YAAa,MAAO,0BAK5C,OACI,cAAC,IAAD,CAAQH,cAAeA,EAAeE,iBAAkBA,EACpDK,SAAQ,uCAAE,WAAOC,GAAP,eAAAC,EAAA,sEAIaC,IAAMuC,IAAN,oDAA+DzC,GAJ5E,OAIAG,EAJA,OAMNV,EAAiBU,GACjBhB,EAAQiB,KAAK,KAPP,2CAAF,sDADZ,SAYK,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACR,OACI,qCACI,qBAAKC,UAAU,wBAAf,SAAuC,oBAAIA,UAAU,6BAAd,uBACvC,eAAC,IAAD,CAAMA,UAAU,OAAhB,UACI,qBAAKA,UAAU,WAAf,SACI,sBAAKA,UAAU,oBAAf,UACI,6CACA,cAAC,IAAD,CAAOC,KAAK,WAAWC,KAAK,OAAOF,UAAW,gBAAkBF,EAAOd,UAAYe,EAAQf,SAAW,cAAgB,MACtH,cAAC,IAAD,CAAciB,KAAK,WAAWE,UAAU,MAAMH,UAAU,0BAMhE,wBAAQA,UAAU,uBAAuBE,KAAK,SAA9C,oBACA,wBAAQF,UAAU,uBAAuBE,KAAK,QAA9C,6BC/BbkC,G,OAjBH,WACV,OACE,8BACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,OAAOlC,UAAWE,IAC9B,cAAC,IAAD,CAAOiC,OAAK,EAACD,KAAK,IAAIlC,UAAWxB,IACjC,cAAC,IAAD,CAAO0D,KAAK,OAAOlC,UAAWS,IAC9B,cAAC,IAAD,CAAO0B,OAAK,EAACD,KAAK,YAAYlC,UAAW8B,IACzC,cAAC,IAAD,CAAOK,OAAK,EAACD,KAAK,uBAAuBlC,UAAWgC,IACpD,cAAC,IAAD,CAAU/B,GAAG,eCRRmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.ed5723a4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport const Login = () => {\r\n    const history = useHistory();\r\n\r\n    const [initialValues, setinitialvalues] = useState({\r\n\r\n        email: '',\r\n        password: ''\r\n    })\r\n\r\n    //validation for adding users data \r\n    const validationSchema = Yup.object().shape({\r\n        password: Yup.string()\r\n            .required('Please Enter your password')\r\n            .matches(\r\n                \"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$\",\r\n                \"Must Contain 8 Characters, One Uppercase, One Lowercase and one special case Character\"\r\n            ),\r\n        email: Yup.string().matches(\r\n            \"^[a-z0-9](.?[a-z0-9]){5,}@g(oogle)?mail.com$\",\r\n            \"At least five alphanumeric characters and Must contain @gmail.com\"\r\n        )\r\n            .email('Email is invalid')\r\n            .required('Email is required'),\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema}\r\n            onSubmit={async (values) => {\r\n                // same shape as initial values\r\n\r\n                // const post = await axios.post(`https://61485ca2035b3600175b9dc6.mockapi.io/api/v1/users`, values)\r\n                const post = await axios.post(`https://nodejs-task-5.herokuapp.com/singin`, values)\r\n\r\n                setinitialvalues(post)\r\n                history.push(\"/for\")\r\n            }}>\r\n\r\n\r\n            {({ errors, touched }) => {\r\n                return (\r\n                    <>\r\n                        <div className=\"container text-center\"><h1 className=\"font-weight-bold text-dark\">LogIn</h1></div>\r\n                        <Form className=\"ml-5\">\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-10\">\r\n                                    <label>Email</label>\r\n                                    <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\r\n                                    <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-10\">\r\n                                    <label>Password</label>\r\n                                    <Field name=\"password\" type=\"text\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n                                    <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            <button className=\"btn btn-primary mr-2\" type=\"submit\">Submit</button>\r\n                            {/* <button className=\"btn btn-success mr-2\" type=\"reset\">Reset</button> */}\r\n                            <span> Don't have accound please  <Link to='/reg'>SingUp</Link></span>\r\n                            <p className=\"foreget_password_link\">Foreget Password <Link to='/password'>ForgetPassword</Link></p>\r\n                        </Form>\r\n                    </>\r\n                );\r\n            }}\r\n        </Formik>\r\n\r\n    );\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport const Register = () => {\r\n    const history = useHistory();\r\n\r\n    const [initialValues, setinitialvalues] = useState({\r\n        first_name: '',\r\n        last_name: '',\r\n        email: '',\r\n        password: '',\r\n        confirm_password: ''\r\n    })\r\n\r\n    //validation for adding users data \r\n    const validationSchema = Yup.object().shape({\r\n        first_name: Yup.string().min(3, 'Too Short!').max(30, 'Too Long!')\r\n            .required('First Name is required'),\r\n        last_name: Yup.string().min(3, 'Too Short!').max(30, 'Too Long!')\r\n            .required('Last Name is required'),\r\n        password: Yup.string()\r\n            .required('Please Enter your password')\r\n            .matches(\r\n                \"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$\",\r\n                \"Must Contain 8 Characters, One Uppercase, One Lowercase and one special case Character\"\r\n            ),\r\n        email: Yup.string().matches(\r\n            \"^[a-z0-9](.?[a-z0-9]){5,}@g(oogle)?mail.com$\",\r\n            \"At least five alphanumeric characters and Must contain @gmail.com\"\r\n        )\r\n            .email('Email is invalid')\r\n            .required('Email is required'),\r\n        confirm_password: Yup.string()\r\n            .required('Please Enter your password')\r\n            .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema}\r\n            onSubmit={async (values) => {\r\n                // same shape as initial values\r\n\r\n                // const post = await axios.post(`https://61485ca2035b3600175b9dc6.mockapi.io/api/v1/users`, values)\r\n                const post = await axios.post(`https://nodejs-task-5.herokuapp.com/register`, values)\r\n\r\n                setinitialvalues(post)\r\n                history.push(\"/\")\r\n            }}>\r\n\r\n\r\n            {({ errors, touched }) => {\r\n                return (\r\n                    <>\r\n                        <div className=\"container text-center\"><h1 className=\"font-weight-bold text-dark\">Please Register</h1></div>\r\n                        <Form className=\"ml-5\">\r\n\r\n                            <div className=\"form-row\">\r\n\r\n                                <div className=\"form-group col-5\">\r\n                                    <label>First Name</label>\r\n                                    <Field name=\"first_name\" type=\"text\" className={'form-control' + (errors.first_name && touched.first_name ? ' is-invalid' : '')} />\r\n                                    <ErrorMessage name=\"first_name\" component=\"div\" className=\"invalid-feedback\" />\r\n                                </div>\r\n                                <div className=\"form-group col-5\">\r\n                                    <label>Last Name</label>\r\n                                    <Field name=\"last_name\" type=\"text\" className={'form-control' + (errors.last_name && touched.last_name ? ' is-invalid' : '')} />\r\n                                    <ErrorMessage name=\"last_name\" component=\"div\" className=\"invalid-feedback\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-10\">\r\n                                    <label>Email</label>\r\n                                    <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\r\n                                    <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-10\">\r\n                                    <label>Password</label>\r\n                                    <Field name=\"password\" type=\"text\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n                                    <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-10\">\r\n                                    <label>Confirm Password</label>\r\n                                    <Field name=\"confirm_password\" type=\"text\" className={'form-control' + (errors.confirm_password && touched.confirm_password ? ' is-invalid' : '')} />\r\n                                    <ErrorMessage name=\"confirm_password\" component=\"div\" className=\"invalid-feedback\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <button className=\"btn btn-primary mr-2\" type=\"submit\">Submit</button>\r\n                            <button className=\"btn btn-success mr-2\" type=\"reset\">Reset</button>\r\n                            <span>Already SingUp please<Link to='/'>LogIn</Link></span>\r\n                        </Form>\r\n                    </>\r\n                );\r\n            }}\r\n        </Formik>\r\n\r\n    );\r\n}\r\n\r\n","import React, { useState } from 'react'\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n// Add User details component \r\nconst ForgotPassword = () => {\r\n\r\n\r\n    const url = `/register`;\r\n    const history = useHistory();\r\n\r\n    const [errors, seterrors] = useState('email already')\r\n    const [form_data, setform_data] = useState({\r\n        first_name: '',\r\n        last_name: '',\r\n        email: '',\r\n        password: '',\r\n        confirm_password: ''\r\n    });\r\n\r\n    //Submit Button function call \r\n    const submit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // condition if the data filled is empty it will show toaster\r\n\r\n        const post = await axios.post(url, form_data).then((res) => {\r\n            setform_data(post);\r\n            history.push(\"/\")\r\n        }).catch((e) => {\r\n            console.log(e.response.data)\r\n            seterrors(e.response.data.errors)\r\n        })\r\n\r\n\r\n        //history is use to navigate to userlist\r\n\r\n\r\n    }\r\n\r\n    // onchange function call of handlevent for form filling \r\n    const handlevent = (e) => {\r\n\r\n        // targeting id from form \r\n        const name = e.target.id;\r\n\r\n        //pushing the data \r\n        setform_data({ ...form_data, [name]: e.target.value });\r\n    }\r\n\r\n    return <>\r\n        <div className=\"container text-center\"><h1 className=\"font-weight-bold text-dark\">Add User</h1></div>\r\n        <div>{errors}</div>\r\n        <form>\r\n            <div class=\"mb-3\">\r\n                <lable>first name</lable>\r\n                <input type=\"text\" id=\"first_name\" class=\"form-control\" name=\"fname\" value={form_data.first_name} onChange={handlevent} />\r\n\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <lable>last name</lable>\r\n                <input type=\"text\" id=\"last_name\" class=\"form-control\" value={form_data.last_name} onChange={handlevent} />\r\n\r\n            </div><div class=\"mb-3\">\r\n                <lable>email</lable>\r\n                <input type=\"email\" id=\"email\" class=\"form-control\" value={form_data.email} onChange={handlevent} />\r\n\r\n            </div><div class=\"mb-3\">\r\n                <lable>password</lable>\r\n                <input type=\"text\" id=\"password\" class=\"form-control\" name=\"email\" value={form_data.password} onChange={handlevent} />\r\n\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <lable>confirm password</lable>\r\n                <input id=\"confirm_password\" type=\"text\" class=\"form-control\" name=\"email\" value={form_data.confirm_password} onChange={handlevent} />\r\n            </div>\r\n\r\n            <button type=\"submit\" class=\"btn btn-primary\" onClick={(e) => submit(e)}>Submit</button>\r\n        </form>\r\n        {/* <Container className=\"themed-container\" style={{ \"width\": \"70%\" }}>\r\n            <Form method=\"POST\">\r\n                <FormGroup row className=\"py-3\">\r\n                    <TextField color=\"warning\" id=\"fname\" label=\"First name\" type=\"text\" variant=\"filled\" name=\"fname\" value={form_data.first_name} onChange={handlevent} autoComplete=\"off\" required />\r\n                </FormGroup>\r\n                <FormGroup row className=\"py-3\">\r\n                    <TextField required color=\"warning\" id=\"lname\" label=\"Last name\" type=\"text\" variant=\"filled\" name=\"lname\" value={form_data.last_name} onChange={handlevent} />\r\n                </FormGroup>\r\n                <FormGroup row className=\"py-3\">\r\n                    <TextField required color=\"warning\" id=\"email_id\" label=\"Email_id\" type=\"email\" variant=\"filled\" name=\"email\" value={form_data.email} onChange={handlevent} />\r\n                </FormGroup>\r\n                <FormGroup row className=\"py-3\">\r\n                    <TextField required color=\"warning\" id=\"email_id\" label=\"Email_id\" type=\"email\" variant=\"filled\" name=\"email\" value={form_data.password} onChange={handlevent} />\r\n                </FormGroup>\r\n                <FormGroup row className=\"py-3\">\r\n                    <TextField required color=\"warning\" id=\"email_id\" label=\"Email_id\" type=\"email\" variant=\"filled\" name=\"email\" value={form_data.confirm_password} onChange={handlevent} />\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                    <Button className=\"mt-3 py-1\" style={{ \"width\": \"100%\" }} variant=\"contained\" onClick={(e) => submit(e)}>Submit</Button>\r\n                </FormGroup>\r\n                <ToastContainer />\r\n            </Form>\r\n        </Container> */}\r\n    </>\r\n}\r\n\r\nexport default ForgotPassword","\r\nimport React, { useState } from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Password = () => {\r\n    const history = useHistory();\r\n\r\n    const [initialValues, setinitialvalues] = useState({\r\n\r\n        email: '',\r\n\r\n    })\r\n\r\n    //validation for adding users data \r\n    const validationSchema = Yup.object().shape({\r\n\r\n        email: Yup.string().matches(\r\n            \"^[a-z0-9](.?[a-z0-9]){5,}@g(oogle)?mail.com$\",\r\n            \"At least five alphanumeric characters and Must contain @gmail.com\"\r\n        )\r\n            .email('Email is invalid')\r\n            .required('Email is required'),\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema}\r\n            onSubmit={async (values) => {\r\n                // same shape as initial values\r\n\r\n                // const post = await axios.post(`https://61485ca2035b3600175b9dc6.mockapi.io/api/v1/users`, values)\r\n                const post = await axios.put(`https://nodejs-task-5.herokuapp.com/forget_password`, values)\r\n\r\n                setinitialvalues(post)\r\n                history.push(\"/\")\r\n            }}>\r\n\r\n\r\n            {({ errors, touched }) => {\r\n                return (\r\n                    <>\r\n                        <div className=\"container text-center\"><h1 className=\"font-weight-bold text-dark\">LogIn</h1></div>\r\n                        <Form className=\"ml-5\">\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-10\">\r\n                                    <label>Email</label>\r\n                                    <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\r\n                                    <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            <button className=\"btn btn-primary mr-2\" type=\"submit\">Submit</button>\r\n                            {/* <button className=\"btn btn-success mr-2\" type=\"reset\">Reset</button> */}\r\n                            <span>Back to Login <Link to='/'>LogIn</Link></span>\r\n                            {/* <p className=\"foreget_password_link\">Foreget Password <Link to='/password'>ForgetPassword</Link></p> */}\r\n                        </Form>\r\n                    </>\r\n                );\r\n            }}\r\n        </Formik>\r\n\r\n    );\r\n}\r\nexport default Password\r\n","import React, { useState } from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router';\r\n\r\n\r\nconst ResetPassword = () => {\r\n    const history = useHistory();\r\n\r\n    const [initialValues, setinitialvalues] = useState({\r\n        password: '',\r\n    })\r\n\r\n    //validation for adding users data \r\n    const validationSchema = Yup.object().shape({\r\n        password: Yup.string()\r\n            .required('Please Enter your password')\r\n            .matches(\r\n                \"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$\",\r\n                \"Must Contain 8 Characters, One Uppercase, One Lowercase and one special case Character\"\r\n            ),\r\n        confirm_password: Yup.string()\r\n            .required('Please Enter your password')\r\n            .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema}\r\n            onSubmit={async (values) => {\r\n                // same shape as initial values\r\n\r\n                // const post = await axios.post(`https://61485ca2035b3600175b9dc6.mockapi.io/api/v1/users`, values)\r\n                const post = await axios.put(`https://nodejs-task-5.herokuapp.com/:token/:email`, values)\r\n\r\n                setinitialvalues(post)\r\n                history.push(\"/\")\r\n            }}>\r\n\r\n\r\n            {({ errors, touched }) => {\r\n                return (\r\n                    <>\r\n                        <div className=\"container text-center\"><h1 className=\"font-weight-bold text-dark\">AddUser</h1></div>\r\n                        <Form className=\"ml-5\">\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-10\">\r\n                                    <label>Password</label>\r\n                                    <Field name=\"password\" type=\"text\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n                                    <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n\r\n                            <button className=\"btn btn-primary mr-2\" type=\"submit\">Submit</button>\r\n                            <button className=\"btn btn-success mr-2\" type=\"reset\">Reset</button>\r\n                        </Form>\r\n                    </>\r\n                );\r\n            }}\r\n        </Formik>\r\n\r\n    );\r\n}\r\n\r\nexport default ResetPassword;","import React from 'react'\nimport { Login } from './component/Login'\nimport { Register } from './component/Register'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport ForgotPassword from './component/ForgotPassword';\nimport Password from './component/Password';\nimport ResetPassword from './component/ResetPassword';\nimport './App.css'\n\n\nconst App = () => {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route path='/reg' component={Register} />\n          <Route exact path='/' component={Login} />\n          <Route path=\"/for\" component={ForgotPassword} />\n          <Route exact path=\"/password\" component={Password} />\n          <Route exact path='/reset/:token/:email' component={ResetPassword} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}